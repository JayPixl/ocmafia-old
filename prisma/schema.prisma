generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  username       String    @unique
  slug           String
  password       String
  clearance      Clearance @default(USER)
  avatar         Avatar
  crowns         Int
  rubies         Int
  tagline        String?
  characterLimit Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  characters    Character[] @relation("OwnedCharacters")
  activeGame    Game?       @relation(references: [id], fields: [activeGameId], "PlayerParticipant")
  activeGameId  String?     @db.ObjectId
  hostingGame   Game?       @relation(references: [id], fields: [hostingGameId], "GameHosts")
  hostingGameId String?     @db.ObjectId
  inbox         Inbox?      @relation("Inbox")

  followedBy    User[]   @relation("UserFollows", fields: [followedByIDs], references: [id])
  followedByIDs String[] @db.ObjectId
  following     User[]   @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs  String[] @db.ObjectId
}

model Inbox {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  inboxItems InboxItem[]
  user       User        @relation("Inbox", fields: [userId], references: [id])
  userId     String      @unique @db.ObjectId
}

model Character {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  displayName String
  pronouns    String
  status      CharacterStatus

  stats            Stats
  specialAbility   SpecialAbility
  crowns           Int
  strikes          Int
  description      String
  avatarUrl        String?
  featuredImageUrl String?
  galleryUrls      String[]
  profileLink      Link?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  owner        User    @relation(references: [id], fields: [ownerId], onDelete: Cascade, "OwnedCharacters")
  ownerId      String  @db.ObjectId
  activeGame   Game?   @relation(references: [id], fields: [activeGameId], "CharacterParticipant")
  activeGameId String? @db.ObjectId

  actorInEvents  Event[] @relation("EventActor")
  targetInEvents Event[] @relation("EventTarget")

  @@unique([name, ownerId])
}

model Game {
  id       String      @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  location String
  status   GameStatus?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  currentPhase            Phase?                @relation("CurrentPhase")
  phases                  Phase[]               @relation("GamePhases")
  currentDay              Int?                  @default(1)
  characterRoles          Role[]                @relation(references: [id], fields: [roleIds], "ActiveGameRoles")
  roleIds                 String[]              @db.ObjectId
  characterStatuses       GameCharacterStatus[]
  hosts                   User[]                @relation("GameHosts")
  participatingCharacters Character[]           @relation("CharacterParticipant")
  participatingPlayers    User[]                @relation("PlayerParticipant")
  gameMessages            EventMessages?        @relation("GameEventMessages")
}

model Phase {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  time      Time
  dayNumber Int

  game               Game    @relation(references: [id], fields: [gameId], onDelete: Cascade, "GamePhases")
  gameId             String  @db.ObjectId
  currentPhaseGame   Game?   @relation(references: [id], fields: [currentPhaseGameId], onDelete: Cascade, "CurrentPhase")
  currentPhaseGameId String? @unique @db.ObjectId
  events             Event[] @relation("PhaseEvents")
}

model Event {
  id      String     @id @default(auto()) @map("_id") @db.ObjectId
  draft   Boolean
  type    EventTypes
  message String

  clues String[]

  actor    Character? @relation(references: [id], fields: [actorId], "EventActor")
  actorId  String?    @db.ObjectId
  target   Character? @relation(references: [id], fields: [targetId], "EventTarget")
  targetId String?    @db.ObjectId

  phase   Phase  @relation(fields: [phaseId], references: [id], onDelete: Cascade, "PhaseEvents")
  phaseId String @unique @db.ObjectId
}

model Role {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  alignment   Alignment
  description String
  imageUrl    String?
  activeGames Game[]    @relation(references: [id], fields: [gameIds], "ActiveGameRoles")
  gameIds     String[]  @db.ObjectId
}

model EventMessages {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  game   Game   @relation(references: [id], fields: [gameId], "GameEventMessages")
  gameId String @unique @db.ObjectId

  messages EventMessage[]
}

type EventMessage {
  event   EventTypes
  message String
}

type Link {
  display String?
  url     String
}

type InboxItem {
  message   String
  read      Boolean
  createdAt DateTime @default(now())
  senderId  String?
}

type SpecialAbility {
  name        String
  description String
}

type Stats {
  strength Int
  stealth  Int
  skill    Int
  charisma Int
}

type Avatar {
  avatarType  AvatarTypes  @default(COLOR)
  avatarColor AvatarColors @default(BLUE)
  avatarUrl   String?
}

enum AvatarTypes {
  IMAGE
  COLOR
}

enum AvatarColors {
  RED
  BLUE
  GREEN
}

enum Clearance {
  USER
  ADMIN
}

enum GameCharacterStatus {
  ALIVE
  WOUNDED
  DEAD
}

enum CharacterStatus {
  ACTIVE
  BANNED
}

enum Alignment {
  TOWN
  MAFIA
  NEUTRAL
  HOSTILE
}

enum Time {
  DAY
  NIGHT
}

enum EventTypes {
  KILL
  VOTING_EXECUTION
  WOUND
  VOTING_SKIP
  RESURRECTION
}

enum GameStatus {
  ENLISTING
  ONGOING
  COMPLETED
}
